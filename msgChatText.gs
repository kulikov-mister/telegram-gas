function msgChatText(TelegramJSON) {//—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤  –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
  let text = TelegramJSON.message.text;
  if (!Bot.isNewChatMember()) { //–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    if (Bot.isReply()) { //–µ—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      let chat_idReply = TelegramJSON.message.reply_to_message.from.id;
      let first_nameReply = TelegramJSON.message.reply_to_message.from.first_name;
      let last_nameReply = TelegramJSON.message.reply_to_message.from.last_name;
      let usernameReply = TelegramJSON.message.reply_to_message.from.username;
      user = getUserInfo(first_nameReply, last_nameReply, usernameReply);
      let usetReply = user.username;
      let chatName = TelegramJSON.message.reply_to_message.chat.title;
      if (user.username == '') usetReply = user.first_name + ' ' + user.last_name;
      if (matchesThanks(text).length !== 0) {
        if (TelegramJSON.message.reply_to_message.from.is_bot) {
          msg = '<b>–ü—Ä–∏—è—Ç–Ω–æ, –∫–æ–≥–¥–∞ –º–µ–Ω—è —Ö–≤–∞–ª—è—Ç!</b>üôà\n<i>–Ø —É–º–µ—é —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä–º—É –¥—Ä—É–≥–∏–ºüòç</i>';
          Bot.sendMessage(msg);
          return
        }
        if (Bot.getUserID() == chat_idReply) {
          msg = '–•–∞... –°–µ–±–µ –∫–∞—Ä–º—É —Ö–æ—á–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å? üòú –ù—É-–Ω—É...\n–ü–æ–º–æ–≥–∞–π –¥—Ä—É–≥–∏–º –≤ —á–∞—Ç–µ –∏ –∫–∞—Ä–º–∞ –±—ã—Å—Ç—Ä–æ –≤—ã—Ä–∞—Å—Ç–∏—Ç';
          Bot.sendMessage(msg);
          return
        }
        let usetReplyFullName = user.first_name + user.last_name;
        msg = `üéâ <b><a href='tg://user?id=${chat_idReply}'>${usetReply}</a></b> —Ç–µ–±–µ –ø—Ä–∏–ª–µ—Ç–µ–ª +1 –∫ –∫–∞—Ä–º–µ –æ—Ç <b>${TelegramJSON.message.from.first_name + TelegramJSON.message.from.last_name}</b>\n–¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞: <b> ${setCarma(usetReplyFullName, chat_idReply, chatName)}</b>`;
        let trophy = getTrophy(chat_idReply);
        if (trophy != false) msg += '\n–¢—Ä–æ—Ñ–µ–π:' + trophy
        Bot.sendMessage(msg);
        return;
      }
    }
    if (!Bot.isReply()) { //–µ—Å–ª–∏ –Ω–µ–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
      if (matchesThanks(text).length !== 0) {
        msg= `<a href='${Bot.mentionByID()}'>${Bot.getUserFirstName()}</a>, —á—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ —è —Å–º–æ–≥—É –ø–æ–≤—ã—Å–∏—Ç—å –µ–≥–æ –∫–∞—Ä–º—É.üòå`
        Bot.sendMessage(msg);
        return;
      }
    }
  }
  if (Bot.isNewChatMember()) { // –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    namemsg = `<b>üéâ ${Bot.getUserFullName()}</b>, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å`
    let msg = `<b>${Bot.getUserFirstName()}</b>, —Ç—ã –≤ —á–∞—Ç–µ!\n–°–µ–π—á–∞—Å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫–æ–º.üîç\nüìù <b>–ß—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç</b>, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞.üßæ`
    let keyBoard = {
      "inline_keyboard": [
        [{ "text": "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞", 'callback_data': 'riding_rules'}]],
      "resize_keyboard": true}
    let options = {
      chat_id: TelegramJSON.message.chat.id,
      user_id: TelegramJSON.message.from.id,
      parse_mode: 'HTML',
      disable_web_page_preview: true,
      disable_notification: true,
      reply_markup: keyBoard,
      permissions: {
        can_send_messages: false,
        can_invite_users: true
      },
      until_date: ~~(Date.now()/100) + 604800
    }
    Bot.restrictChatMember(options.chat_id, options.user_id, options.permissions, options.until_date);
    resp = Bot.sendMessage(msg, options);
    let cache = CacheService.getScriptCache();
    let data = {
      chat_id: resp.result.chat.id,
      message_id: resp.result.message_id,
      text: namemsg + '<b>!</b>'
    }
    cache.put(options.user_id, JSON.stringify(data), 21600);
    return;
  }
  if(text === '/rules' || text === '/rules@docs_opeka_bot'){//–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª
    Bot.deleteMessage(TelegramJSON.message.message_id);
    Bot.sendMessage(rules);
    return;
  }

  if(text === '/top' || text === '/top@docs_opeka_bot'){//–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–æ–ø–ª–∏—Å—Ç–∞
    if (leaderBoard()) {
      let msg = leaderBoard();
      Bot.deleteMessage(TelegramJSON.message.message_id);
      Bot.sendMessage(msg);
      return;
    }
    else{
      Bot.deleteMessage(TelegramJSON.message.message_id);
      return;
    }
  }
}