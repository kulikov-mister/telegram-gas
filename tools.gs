/********************************************
 *           –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∫–∞—Ä–º—ã           *
 * ******************************************/

const wsData = Sheet('–†–µ–π—Ç–∏–Ω–≥');
const wsSetting = Sheet('Settings');

function setCarma(name, chatId, chatName) {
  let arrChatId = wsData.getRange(2, 5, wsData.getLastRow()).getValues().flat();
  let idRow = arrChatId.indexOf(+chatId) + 2;
  if (idRow == 1) {
    wsData.appendRow(['', name, 1, chatId, chatName]);
    let currentCarma = 1
    return currentCarma
  }
  let currentCarma = wsData.getRange(idRow, 3).getValue();
  currentCarma = currentCarma + 1
  wsData.getRange(idRow, 3).setValue(currentCarma);
  wsData.getRange('B2:E').sort({ column: 3, ascending: false });
  return currentCarma
}

function leaderBoard() {
  let dataTop = wsData.getRange(2, 1, wsData.getLastRow(), 3).getDisplayValues()
  let board = []
  for (let i = 0; i < dataTop.length - 1; i++) {
    board.push(`<code>${dataTop[i][0]}</code> <b>${dataTop[i][1]}: ${dataTop[i][2]}</b>\n`)
  }
  let text = 'üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤</b>\n\n' + board.slice(0, 20).join('');
  //console.log(text)
  return text
}

function thanks(query) {
  let dataThanks = wsSetting.getRange(2, 1, wsSetting.getLastRow() - 1).getValues().flat();

  return dataThanks.filter(function (el) {
    return el.toLowerCase().indexOf(query.toLowerCase()) > -1;
  })
}

function matchesThanks(query) {
  // query = '+'
  query = query.toLowerCase().replace(/[\s.,‚Ññ#"'%?!&()<>]/g, ' ').split(' ').filter(Boolean)
  let dataThanks = wsSetting.getRange(2, 1, wsSetting.getLastRow() - 1).getValues().flat();

  let matches = dataThanks.filter(function (item) {
    return query.indexOf(item.toLowerCase()) > -1
  })
  return matches
}

function getTrophy(chatId) {
  let arrChatId = wsData.getRange(2, 4, wsData.getLastRow()).getValues().flat();
  let idRow = arrChatId.indexOf(+chatId) + 2;
  let trophy = false
  if (idRow > 1 && idRow < 5) {
    trophy = wsData.getRange(idRow, 1).getValue();
  }
  return trophy
}

function getUserInfo(first_name = '', last_name = '', username = '') {
  let user = {
    first_name: first_name,
    last_name: last_name == '' ? '' : ' ' + last_name,
    username: username
  }
  return user
}

/********************************************
 *                Bot —Ñ—É–Ω–∫—Ü–∏–∏               *
 * ******************************************/

function Sheet(name) {//–æ—Ç–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
  return SpreadsheetApp.openById(botSheet).getSheetByName(name);
}

//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
function join(chat_id, name, last_name, row_t){
  let row = undefined
  if(row_t){
    row = row_t
  }
  else{
    row = search_row(chat_id, 'users', 2)
  }
  if(row){
    return 0
  }
  let add_info = [chat_id, name, last_name, DATE_CURRENT]
  setSheetValues("users", add_info)
  sendText(chat_id, "‚úÖ–ü–æ–¥–ø–∏—Å–∞–Ω—ã‚úÖ")
  return 0
}

//—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏
function leave(chat_id, row_t){
  let row = undefined
  if(row_t){
    row = row_t
  }
  else{
    row = search_row(chat_id, 'users', 2)
  }
  if(row){
    Sheet("users").deleteRow(row)
    Bot.sendMessage("‚ùå–û—Ç–ø–∏—Å–∞–Ω—ã‚ùå")
  }
  return 0
}


//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
function fan_num(_chat_id){
  return Sheet("users").getLastRow()-1
}

//–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–æ–±—â–µ–Ω–∏—è donate
let msgd = TelegramLibrary.donate_msg();

//—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω—É –∏–ª–∏ —Ñ–∞–Ω–∞—Ç–∞–º
function send_fans_number(chat_id){
  let keyboard = undefined
  if(Admins_UID.indexOf(chat_id) < 0){
    keyboard = keyboard_fans
  }
  else{
    keyboard = keyboard_admins
  }
  sendTextKeyboard(chat_id, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: "+String(fan_num(chat_id)), keyboard)
}

//–ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –æ–¥–Ω–æ–≥–æ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
function getDataColumnSheet(sheetName, row=1,col=1) {
  //sheetName = 'Test';
  try{
    const list = Sheet(sheetName).getSheetValues(row, col, Sheet(sheetName).getLastRow(), 1).filter(n => n!='').flat();
    //console.log(list);
    return list
  }
  catch{
    return null
  }
}

//–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç–∞—Ä—Ç–æ–≤–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
function getDataRowSheet(sheetName, row=1,col=1) {
  //sheetName = 'Test';
  try{
    const list = Sheet(sheetName).getSheetValues(row, col, 1, Sheet(sheetName).getLastColumn()).filter(n => n!='').flat();
    //console.log(list);
    return list
  }
  catch{
    return null
  }
}

function getDataUsers(sheetname) {
  sheetname = 'users';
  try{
    let ss = SpreadsheetApp.openById(botSheet);
    let sheet = ss.getSheetByName(sheetname);
    let data = sheet.getRange(2, 2, sheet.getLastRow()-1, 4).getValues();
    let lists = []
    for (i in data) {
      lists.push(`${data[i][0]}*~${data[i][2]}*~${data[i][3]}`);
    }
    list = lists.flat()
    console.log(list)
    return list
  }
  catch{
    return 0
  }
}

//—á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ
function getDataSheet(sheetName) {
  //sheetname = 'Instructions'
  return Sheet(sheetName).getRange().getValues();
}

//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –≤ –≤–∏–¥–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ
function addDataSheet(sheetName, data) {
  Sheet(sheetName).appendRow(data)
}

//–≤–∑—è—Ç–∏–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å —è—á–µ–π–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ
function getSheetValue(sheetName, row, col){
  return Sheet(sheetName).getSheetValues(row, col, 1, 1)
}

//—Ñ—É–Ω–∫—Ü–∏—è –≤–∑—è—Ç–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω—É–∂–Ω–æ–º –ª–∏—Å—Çe
function getSheetVal(sheetName, row, col){
  return Sheet(sheetName).getSheetValues(row, col, 1, 1)[0][0]
}

//—Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ –Ω—É–∂–Ω—ã–π –ª–∏—Å—Ç
function setSheetVal(sheetName, row, col, val){
  return Sheet(sheetName).getRange(row, col).setValue(val)
}

//—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–æ —è—á–µ–π–∫–∞–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
function setSheetValues(sheetName, val){
  let values = val.toString().split(',');
  return Sheet(sheetName).appendRow(values)
}

//—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ –∏–∑ –ª–∏—Å—Ç–∞
function deleteSheetVal(sheetName, row, col){
  return Sheet(sheetName).getRange(row, col).deleteCells();
}

function delSheet(sheetName) {
  //sheetName = '–ª–∏—Å—Ç';
  SpreadsheetApp.openById(botSheet).setActiveSheet(Sheet(sheetName), true);
  return SpreadsheetApp.openById(botSheet).deleteActiveSheet();
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–ª–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞ (–¥–ª–∏–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –º–∞—Å—Å–∏–≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å, –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –¥–µ–ª–µ–Ω–∏—è)
function listArray(num, array, container) {
  for (d = 0; d < array.length; d += num) {
    container.push(array.slice(d, d + num));
  }
  return container
}

function finalCountdown() {
  let token = tgBotToken;
  let chatID = TelegramJSON.message.chat.id;
  let urls = 'https://api.telegram.org/bot' + token +
      '/sendMessage?chat_id=' + chatID + '&text=It\'s the final countdown!';
  let response = UrlFetchApp.fetch(urls);
  response = JSON.parse(response.getContentText());
  let msgID = response.result.message_id;
  Utilities.sleep(1000);
  let baseUrl = 'https://api.telegram.org/bot' + token +
      '/editMessageText?chat_id=' + chatID + '&message_id=' + msgID + '&text=';
  let w = { '0': "0Ô∏è‚É£", '1': "1Ô∏è‚É£", '2': "2Ô∏è‚É£", '3': "3Ô∏è‚É£", '4': "4Ô∏è‚É£", '5': "5Ô∏è‚É£", '6': "6Ô∏è‚É£", '7': "7Ô∏è‚É£", '8': "8Ô∏è‚É£", '9': "9Ô∏è‚É£", ":": "‚ñ™Ô∏è" }

  let url;
  for (let i = 0; i < 15; ++i) {

      let date = new Date();
      let timestamp = date.getTime();
      let timezone = Session.getScriptTimeZone()
      let times = Utilities.formatDate(date, timezone, "HH:mm:ss");
      url = baseUrl + [...times.toString()].map(e => w[e]).join();
      UrlFetchApp.fetch(url);
      Utilities.sleep(1000);
  }
  url = baseUrl + 'üí£Boom!';
  UrlFetchApp.fetch(url);
}

//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
function search_row(text, list, index, start_row = 1){
  //text = "–í—Ç–æ—Ä–∞—è"; 
  //list = 'test';
  let lastRow = Sheet(list).getLastRow();
  for(start_row=1; start_row<=lastRow; start_row++){
    this_text = getSheetVal(list, start_row, index)
    if(this_text == String(text)){
      //console.log(start_row)
      return start_row
    }
    else undefined
  }
}

//—Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é
function search_col(text, list, index, start_col = 1){
  //text = "–ü–∞—Å–ø–æ—Ä—Ç"; 
  //list = 'users';
  let lastColumn = Sheet(list).getLastColumn();
  for(start_col=1; start_col<=lastColumn; start_col++){
    this_text = getSheetVal(list, index, start_col)
    if(this_text == String(text)){
      //console.log(start_col)
      return start_col
    }
    else undefined
  }
}

//–≤–∑—è—Ç–∏–µ –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π
function getSheetValues(sheetName, row, col, cols=1){
  return Sheet(sheetName).getSheetValues(row, col, Sheet(sheetName).getLastRow(), cols)
}

function getInfoArticles(){
  let values = Sheet('–ê—Ä—Ö–∏–≤').getRange(1, 1, Sheet('–ê—Ä—Ö–∏–≤').getLastRow(), Sheet('–ê—Ä—Ö–∏–≤').getLastColumn()).getValues();
  let board = []
  for (let i = 0; i < Sheet('–ê—Ä—Ö–∏–≤').getLastRow(); i++) {
    let info = (`<a href="${values[i][1]}">${values[i][0]}</a>\n`)
    board += info;
  }
  return board.toString();
}

function getInfoValues(){ //—Ç–µ–ª—Ñ–æ–Ω—ã –¥–æ–≤–µ—Ä–∏—è
  let values = Sheet('INFO').getRange(1, 1, Sheet('INFO').getLastRow(), Sheet('INFO').getLastColumn()-1).getValues();
  let board = []
  for (let i = 0; i < Sheet('INFO').getLastRow(); i++) {
    if(values[i][0] == '–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–æ–≤–µ—Ä–∏—è' || values[i][0] == '–í—Å–µ –æ–± –£—Ñ–µ'){
      let info = (`<a href="${values[i][1].substring(19)}">${values[i][0]}</a>\n`);
      board += info;
    }
    else{
      let info = (`<a href="${values[i][1]}">${values[i][0]}</a>\n`)
      board += info;
    }
  }
  return board.toString();
}